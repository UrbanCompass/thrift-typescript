/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @uc/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "test-lib";
import * as SharedServiceBase from "./SharedServiceBase";
import * as SharedUnion from "./SharedUnion";
import * as SharedEnum from "./SharedEnum";
export interface IGetUnion__Args__Args {
    index: number;
}
export class GetUnion__Args {
    public index: number;
    constructor(args: IGetUnion__Args__Args) {
        if (args != null && args.index != null) {
            this.index = args.index;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[index] is unset!");
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("GetUnion__Args");
        if (this.index != null) {
            output.writeFieldBegin("index", thrift.Thrift.Type.I32, 1);
            output.writeI32(this.index);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): GetUnion__Args {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_1: number = input.readI32();
                        _args.index = value_1;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.index !== undefined) {
            return new GetUnion__Args(_args);
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Unable to read GetUnion__Args from input");
        }
    }
}
export interface IGetEnum__Args__Args {
}
export class GetEnum__Args {
    constructor() {
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("GetEnum__Args");
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): GetEnum__Args {
        input.readStructBegin();
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new GetEnum__Args();
    }
}
export interface IGetUnion__Result__Args {
    success?: SharedUnion.SharedUnion;
}
export class GetUnion__Result {
    public success?: SharedUnion.SharedUnion;
    constructor(args?: IGetUnion__Result__Args) {
        if (args != null && args.success != null) {
            this.success = args.success;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("GetUnion__Result");
        if (this.success != null) {
            output.writeFieldBegin("success", thrift.Thrift.Type.STRUCT, 0);
            this.success.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): GetUnion__Result {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 0:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_2: SharedUnion.SharedUnion = SharedUnion.SharedUnion.read(input);
                        _args.success = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new GetUnion__Result(_args);
    }
}
export interface IGetEnum__Result__Args {
    success?: SharedEnum.SharedEnum;
}
export class GetEnum__Result {
    public success?: SharedEnum.SharedEnum;
    constructor(args?: IGetEnum__Result__Args) {
        if (args != null && args.success != null) {
            this.success = args.success;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("GetEnum__Result");
        if (this.success != null) {
            output.writeFieldBegin("success", thrift.Thrift.Type.I32, 0);
            output.writeI32(this.success);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): GetEnum__Result {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 0:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_3: SharedEnum.SharedEnum = input.readI32();
                        _args.success = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new GetEnum__Result(_args);
    }
}
export class Client extends SharedServiceBase.Client {
    public _seqid: number;
    public _reqs: {
        [name: number]: (err: Error | object | undefined, val?: any) => void;
    };
    public output: thrift.TTransport;
    public protocol: new (trans: thrift.TTransport) => thrift.TProtocol;
    constructor(output: thrift.TTransport, protocol: new (trans: thrift.TTransport) => thrift.TProtocol) {
        super(output, protocol);
        this._seqid = 0;
        this._reqs = {};
        this.output = output;
        this.protocol = protocol;
    }
    public incrementSeqId(): number {
        return this._seqid += 1;
    }
    public getUnion(index: number): Promise<SharedUnion.SharedUnion> {
        const requestId: number = this.incrementSeqId();
        return new Promise<SharedUnion.SharedUnion>((resolve, reject): void => {
            this._reqs[requestId] = (error, result) => {
                delete this._reqs[requestId];
                if (error != null) {
                    reject(error);
                }
                else {
                    resolve(result);
                }
            };
            this.send_getUnion(index, requestId);
        });
    }
    public getEnum(): Promise<SharedEnum.SharedEnum> {
        const requestId: number = this.incrementSeqId();
        return new Promise<SharedEnum.SharedEnum>((resolve, reject): void => {
            this._reqs[requestId] = (error, result) => {
                delete this._reqs[requestId];
                if (error != null) {
                    reject(error);
                }
                else {
                    resolve(result);
                }
            };
            this.send_getEnum(requestId);
        });
    }
    public send_getUnion(index: number, requestId: number): void {
        const output: thrift.TProtocol = new this.protocol(this.output);
        output.writeMessageBegin("getUnion", thrift.Thrift.MessageType.CALL, requestId);
        const args: GetUnion__Args = new GetUnion__Args({ index });
        args.write(output);
        output.writeMessageEnd();
        this.output.flush();
        return;
    }
    public send_getEnum(requestId: number): void {
        const output: thrift.TProtocol = new this.protocol(this.output);
        output.writeMessageBegin("getEnum", thrift.Thrift.MessageType.CALL, requestId);
        const args: GetEnum__Args = new GetEnum__Args();
        args.write(output);
        output.writeMessageEnd();
        this.output.flush();
        return;
    }
    public recv_getUnion(input: thrift.TProtocol, mtype: thrift.Thrift.MessageType, requestId: number): void {
        const noop = (): any => null;
        const callback = this._reqs[requestId] || noop;
        if (mtype === thrift.Thrift.MessageType.EXCEPTION) {
            const x: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException();
            x.read(input);
            input.readMessageEnd();
            return callback(x);
        }
        else {
            const result: GetUnion__Result = GetUnion__Result.read(input);
            input.readMessageEnd();
            if (result.success != null) {
                return callback(undefined, result.success);
            }
            else {
                return callback(new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, "getUnion failed: unknown result"));
            }
        }
    }
    public recv_getEnum(input: thrift.TProtocol, mtype: thrift.Thrift.MessageType, requestId: number): void {
        const noop = (): any => null;
        const callback = this._reqs[requestId] || noop;
        if (mtype === thrift.Thrift.MessageType.EXCEPTION) {
            const x: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException();
            x.read(input);
            input.readMessageEnd();
            return callback(x);
        }
        else {
            const result: GetEnum__Result = GetEnum__Result.read(input);
            input.readMessageEnd();
            if (result.success != null) {
                return callback(undefined, result.success);
            }
            else {
                return callback(new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, "getEnum failed: unknown result"));
            }
        }
    }
}
export interface ILocalHandler {
    getUnion(index: number): SharedUnion.SharedUnion | Promise<SharedUnion.SharedUnion>;
    getEnum(): SharedEnum.SharedEnum | Promise<SharedEnum.SharedEnum>;
}
export type IHandler = ILocalHandler & SharedServiceBase.IHandler;
export class Processor extends SharedServiceBase.Processor {
    public _handler: IHandler;
    constructor(handler: IHandler) {
        super({
            getStruct: handler.getStruct
        });
        this._handler = handler;
    }
    public process(input: thrift.TProtocol, output: thrift.TProtocol): void {
        const metadata: thrift.TMessage = input.readMessageBegin();
        const fname: string = metadata.fname;
        const requestId: number = metadata.rseqid;
        const methodName: string = "process_" + fname;
        switch (methodName) {
            case "process_getStruct": {
                this.process_getStruct(requestId, input, output);
                return;
            }
            case "process_getUnion": {
                this.process_getUnion(requestId, input, output);
                return;
            }
            case "process_getEnum": {
                this.process_getEnum(requestId, input, output);
                return;
            }
            default: {
                input.skip(thrift.Thrift.Type.STRUCT);
                input.readMessageEnd();
                const errMessage = "Unknown function " + fname;
                const err = new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN_METHOD, errMessage);
                output.writeMessageBegin(fname, thrift.Thrift.MessageType.EXCEPTION, requestId);
                err.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
        }
    }
    public process_getUnion(requestId: number, input: thrift.TProtocol, output: thrift.TProtocol): void {
        new Promise<SharedUnion.SharedUnion>((resolve, reject): void => {
            try {
                const args: GetUnion__Args = GetUnion__Args.read(input);
                input.readMessageEnd();
                resolve(this._handler.getUnion(args.index));
            }
            catch (err) {
                reject(err);
            }
        }).then((data: SharedUnion.SharedUnion): void => {
            const result: GetUnion__Result = new GetUnion__Result({ success: data });
            output.writeMessageBegin("getUnion", thrift.Thrift.MessageType.REPLY, requestId);
            result.write(output);
            output.writeMessageEnd();
            output.flush();
            return;
        }).catch((err: Error): void => {
            const result: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, err.message);
            output.writeMessageBegin("getUnion", thrift.Thrift.MessageType.EXCEPTION, requestId);
            result.write(output);
            output.writeMessageEnd();
            output.flush();
            return;
        });
    }
    public process_getEnum(requestId: number, input: thrift.TProtocol, output: thrift.TProtocol): void {
        new Promise<SharedEnum.SharedEnum>((resolve, reject): void => {
            try {
                input.readMessageEnd();
                resolve(this._handler.getEnum());
            }
            catch (err) {
                reject(err);
            }
        }).then((data: SharedEnum.SharedEnum): void => {
            const result: GetEnum__Result = new GetEnum__Result({ success: data });
            output.writeMessageBegin("getEnum", thrift.Thrift.MessageType.REPLY, requestId);
            result.write(output);
            output.writeMessageEnd();
            output.flush();
            return;
        }).catch((err: Error): void => {
            const result: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, err.message);
            output.writeMessageBegin("getEnum", thrift.Thrift.MessageType.EXCEPTION, requestId);
            result.write(output);
            output.writeMessageEnd();
            output.flush();
            return;
        });
    }
}
